stages:
  - prepare
  - build:frontend
  - build:docker
  - deploy

variables:
  K8_NAMESPACE: covid-19-vis

export-environment:
  image: debian:stretch-slim
  stage: prepare
  script:
    - if [[ ${CI_COMMIT_TAG} =~ ^v[0-9].[0-9].[0-9] ]]; then VERSION=${CI_COMMIT_TAG}; else VERSION=${CI_COMMIT_SHORT_SHA}; fi
    - URL_SUFFIX="covid19vis.lingvis.io"
    - URL_PREFIX=""
    - ENV_NAME="production"
    - if ! [[ ${CI_COMMIT_TAG} =~ ^v[0-9].[0-9].[0-9] ]]; then if [[ ${CI_COMMIT_BRANCH} =~ ^master$ ]]; then URL_PREFIX="staging."; ENV_NAME="staging"; else URL_PREFIX="${CI_ENVIRONMENT_SLUG}."; ENV_NAME="review-${CI_ENVIRONMENT_SLUG}"; fi fi
    #
    - URL_FRONTEND="${URL_PREFIX}${URL_SUFFIX}"
    - URL_BACKEND="${URL_PREFIX}api.${URL_SUFFIX}"
    - URL_TILES="${URL_PREFIX}tiles.${URL_SUFFIX}"
    - echo "VERSION=$VERSION" >> var.env
    - echo "ENV=$ENV" >> var.env
    - echo "URL_FRONTEND=${URL_FRONTEND}" >> var.env
    - echo "URL_BACKEND=${URL_BACKEND}" >> var.env
    - echo "URL_TILES=${URL_TILES}" >> var.env
    - echo "ENV_NAME_FRONTEND=frontend/${ENV_NAME}" >> var.env
    - echo "ENV_NAME_BACKEND=backend/${ENV_NAME}" >> var.env
    - echo "ENV_NAME_TILES=tiles/${ENV_NAME}" >> var.env
    - echo "ENV_NAME_CRAWLER=crawler/${ENV_NAME}" >> var.env
  artifacts:
    reports:
      dotenv: var.env
  tags:
    - docker

.rules-backend: &rules-backend
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # run if files changed; no branch restrictions
  - changes:
      - Backend/**
      - Backend/**/*
      - k8/Backend/**
      - k8/Backend/**/*
      - .gitlab-ci.yml
    when: always
  - if: $CI_COMMIT_TAG =~ /^v.*/
    when: always
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never

.rules-frontend: &rules-frontend
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # run if files changed; no branch restrictions
  - changes:
      - Frontend/**
      - Frontend/**/*
      - k8/Frontend/**
      - k8/Frontend/**/*
      - .gitlab-ci.yml
    when: always
  - if: $CI_COMMIT_TAG =~ /^v.*/
    when: always
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never

.rules-crawler: &rules-crawler
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # run if files changed; no branch restrictions
  - changes:
      - Crawler/**
      - Crawler/**/*
      - k8/Crawler/**
      - k8/Crawler/**/*
    if: $CI_COMMIT_BRANCH == "master"
    when: always
  - if: $CI_COMMIT_TAG =~ /^v.*/
    when: always
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never


.rules-tileserver: &rules-tileserver
  rules:     
  # do not run pipelines for merge requests (gets rid of "detatched pipelines")
  - if: $CI_MERGE_REQUEST_ID
    when: never
  # run if files changed; no branch restrictions
  - changes:
      - Tiles/**
      - Tiles/**/*
      - k8/Tiles/**
      - k8/Tiles/**/*
      - .gitlab-ci.yml
    when: always
  - if: $CI_COMMIT_TAG =~ /^v.*/
    when: always
  # default is on_success, so explicitly set job not to run if none of the above rules matched
  - when: never

###########################################
# BUILD
###########################################

build-frontend:
  stage: build:frontend
  image: node:latest
  script:
    - cd Frontend/gis
    - npm install --unsafe-perm
    - npm run-script build
  artifacts:
    expire_in: 1 day
    paths:
      - ./Frontend/gis/dist
  cache:
    key: 
      files:
        - ./Frontend/gis/package.json
        - ./Frontend/gis/package-lock.json
    paths:
      - ./Frontend/gis/node_modules
  tags:
    - docker

###########################################
# DOCKERIZE
###########################################

.dockerize-template: &dockerize-template
  stage: build:docker
  image: docker:latest
  services: 
    - docker:dind
  before_script:
    - apk add bash
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login --username "$CI_REGISTRY_USER" --password-stdin $CI_REGISTRY
    - cd ${FOLDER}
    - IMG=$(bash -c "echo ${CI_REGISTRY_IMAGE}/${FOLDER,,}:${VERSION}")
    - docker build -t "$IMG" .
    - docker push "$IMG"
  tags:
    - docker-build

dockerize-backend:
  variables:
    FOLDER: Backend
  <<: *dockerize-template
  <<: *rules-backend
  needs:
    - export-environment
  dependencies:
    - export-environment

dockerize-frontend:
  variables:
    FOLDER: Frontend
  <<: *dockerize-template
  <<: *rules-frontend
  needs:
    - build-frontend
    - export-environment
  dependencies:
    - build-frontend
    - export-environment

dockerize-crawler:
  variables:
    FOLDER: Crawler
  <<: *dockerize-template
  <<: *rules-crawler
  needs:
    - export-environment
  dependencies:
    - export-environment

dockerize-tileserver:
  variables:
    FOLDER: Tiles
  <<: *dockerize-template
  <<: *rules-tileserver
  needs:
    - export-environment
  dependencies:
    - export-environment

###########################################
# DEPLOY
###########################################

.deploy-script: &deploy-template
  stage: deploy
  script:
    - helm upgrade --namespace=${K8_NAMESPACE} --dry-run --debug --install --set sha="${VERSION}" --set url=${URL} ${HELM_CHART}-${ENV_NAME} ./k8/${FOLDER}
#    - helm upgrade --namespace=${K8_NAMESPACE} --install --set sha="${VERSION}" --set url=${URL} ${HELM_CHART}-${ENV_NAME} ./k8/${FOLDER}
  tags:
    - k8-admin

deploy-backend:
  variables:
    HELM_CHART: covid-19-vis-backend
    FOLDER: Backend
  <<: *deploy-template
  <<: *rules-backend
  before_script:
    - URL=${URL_BACKEND}
  environment:
    url: $URL_BACKEND
    name: $ENV_NAME_BACKEND
    action: stop
    on_stop: remove-deployment-backend
    kubernetes:
      namespace: $K8_NAMESPACE
  needs:
    - dockerize-backend
    - export-environment
  dependencies:
    - dockerize-backend
    - export-environment

deploy-frontend:
  variables:
    HELM_CHART: covid-19-vis-frontend
    FOLDER: Frontend
  <<: *deploy-template
  <<: *rules-frontend
  before_script:
    - URL=${URL_FRONTEND}
  environment:
    url: $URL_FRONTEND
    name: $ENV_NAME_FRONTEND
    action: stop
    on_stop: remove-deployment-frontend
    kubernetes:
      namespace: $K8_NAMESPACE
  needs:
    - dockerize-frontend
    - export-environment
  dependencies:
    - dockerize-frontend
    - export-environment

deploy-crawler:
  variables:
    HELM_CHART: covid-19-vis-crawler
    FOLDER: Crawler
  <<: *deploy-template
  <<: *rules-crawler
  environment:
    name: $ENV_NAME_CRAWLER
    action: stop
    on_stop: remove-deployment-crawler
    kubernetes:
      namespace: $K8_NAMESPACE
  needs:
    - dockerize-crawler
    - export-environment
  dependencies:
    - dockerize-crawler
    - export-environment

deploy-tileserver:
  variables:
    HELM_CHART: covid-19-vis-tileserver
    FOLDER: Tiles
  <<: *deploy-template
  <<: *rules-tileserver
  before_script:
    - URL=${URL_TILES}
  environment:
    url: $URL_TILES
    name: $ENV_NAME_TILES
    action: stop
    on_stop: remove-deployment-tiles
    kubernetes:
      namespace: $K8_NAMESPACE
  needs:
    - dockerize-tileserver
    - export-environment
  dependencies:
    - dockerize-tileserver
    - export-environment

###########################################
# CLEANUP
###########################################

.remove-deployment: &remove-deployment
  stage: deploy
  variables:
    GIT_STRATEGY: none
  script:
    - helm delete --dry-run --debug --purge ${HELM_CHART}-${ENV_NAME}
    - helm delete --purge ${HELM_CHART}-${ENV_NAME}
  when: manual
  dependencies: []
  tags:
    - k8-admin

remove-deployment-backend:
  <<: *remove-deployment
  environment:
    name: $ENV_NAME_BACKEND
    action: stop

remove-deployment-frontend:
  <<: *remove-deployment
  environment:
    name: $ENV_NAME_FRONTEND
    action: stop

remove-deployment-crawler:
  <<: *remove-deployment
  environment:
    name: $ENV_NAME_CRAWLER
    action: stop

remove-deployment-tiles:
  <<: *remove-deployment
  environment:
    name: $ENV_NAME_TILES
    action: stop
